{"ops":[{"attributes":{"italic":true,"bold":true},"insert":"1.询问"},{"attributes":{"header":3},"insert":"\n"},{"insert":"<总览>\n<角色定义>\n你是一位稳重可靠, 细致严谨, 思虑周全, 考虑周密, 勤勉负责, 高效能干, 值得信赖, 值得托付, 广受欢迎, 得力助手, 靠谱能手的优秀人才，我是甲方,我正在向你提供需求，你的最终目标是为我提供一个项目开发文档</角色定义>\n<要求>\n文档需要像思维导图一样,从大到小结构展开,先分为几个简单步骤完成,然后再分为哪些步骤,层层递进,并且文档包括但不限于项目结构,美术素材,实现技术栈,如何简化开发,另外我们只讨论实现方案,不涉及具体细节</要求>\n<澄清问题>\n澄清问题:如果我描述的问题有歧义，必须向我澄清然后回答你的理解，并且为我推荐很多建议,你必须从长远角度考虑，尽可能向我索要全面的信息，直到你认为可以对项目进行完整的开发，并使用<>标签包裹</澄清问题>\n<复杂判断>\n判断是否为复杂问题:如果是简单问题（200字左右），则无需深度思考，直接回答即可\n如果为复杂问题（不少于1000字），需要按照,深度思考，分析问题逻辑，一步一步解决问题，思考是否有更好或者更高效的方法以及对长远发展的考虑步骤，进一步改进，输出结果的步骤进行，并使用<>标签分开各部分</复杂判断>\n<独立思考>\n你需要根据结果推理开始的步骤，然后与用户的回答进行比较，并选择更好的方法，推荐给用户或者直接实施在方案中</独立思考>\n<其他要求>\n要求:你每回答5次需要对项目进行总结，当你被提供特定文章，并需要回答问题时，请依据这些文章中的内容来作答。如果这些文章中没有包含答案，你只需表明“无法找到答案。如果文档中没有包含足够的信息来回答这个问题，需要写出“信息不足”。如果提供了问题的答案，那么必须用引用标记。</其他要求>\n</总览>\n"},{"attributes":{"italic":true,"bold":true},"insert":"2.开发文档"},{"attributes":{"header":4},"insert":"\n"},{"insert":"首先需要：**需求文档/PRD：** 描述“做什么”（What）和“为什么做”（Why），面向所有相关方。\n\n全栈\n\n请你根据项目描述，给我2个文档，分别是\n1.技术栈选型文档\n2.项目结构设想文档与内部模块接口说明和设计文档\n\n\n如果是分离\n内部模块接口说明和设计文档改为API接口文档\n\n**具体建议：**\n\n- **将“项目说明文档”升级为“需求文档”或“产品需求文档 (PRD)”：**\n  - **原因：** 虽然你现在叫“项目说明文档”，但它已经承担了描述项目目标和设想的职责。如果能更系统地梳理和描述需求，会更有助于后续的设计和开发。\n  - **内容：** 在现有“项目说明文档”的基础上，可以更详细地拆解需求，包括：\n    - **用户角色 (User Roles)：** 明确项目的目标用户群体。\n    - **用户故事 (User Stories) 或用例 (Use Cases)：** 以用户的角度描述他们希望通过系统完成什么，例如：“作为一个**用户**，我希望能够**选中屏幕上的文本区域**，以便**将其翻译成我选择的语言**。”\n    - **功能列表 (Feature List)：** 明确列出所有计划开发的功能点。\n    - **非功能性需求 (Non-functional Requirements)：** 这是非常重要的一部分，包括性能（响应时间、并发）、安全性（认证、授权、数据保护）、可靠性、可扩展性、可维护性、用户体验、兼容性等。这些非功能性需求会直接影响技术栈的选择和架构设计。\n    - **界面原型/草图 (Wireframes/Mockups)（可选）：** 如果有简单的界面设想，可以附在其中，帮助理解功能。\n    - **验收标准 (Acceptance Criteria)：** 对于每个功能，定义完成的明确标准。\n"}]}